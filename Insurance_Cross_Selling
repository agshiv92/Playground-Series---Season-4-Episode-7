{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "85b4ca6d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-15T13:27:47.003628Z",
     "iopub.status.busy": "2024-07-15T13:27:47.003269Z",
     "iopub.status.idle": "2024-07-15T13:27:47.746024Z",
     "shell.execute_reply": "2024-07-15T13:27:47.745129Z"
    },
    "papermill": {
     "duration": 0.762652,
     "end_time": "2024-07-15T13:27:47.748601",
     "exception": false,
     "start_time": "2024-07-15T13:27:46.985949",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s4e7/sample_submission.csv\n",
      "/kaggle/input/playground-series-s4e7/train.csv\n",
      "/kaggle/input/playground-series-s4e7/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a179378",
   "metadata": {
    "papermill": {
     "duration": 0.015781,
     "end_time": "2024-07-15T13:27:47.781459",
     "exception": false,
     "start_time": "2024-07-15T13:27:47.765678",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<div style=\"border-radius:10px; padding: 12px; background-color: #ffffff; font-size:130%; text-align:left\">\n",
    "\n",
    "<h2 align=\"left\"><font color=#E1B12D>Introduction</font></h2>\n",
    "\n",
    "Grupo Bimbo, a leading multinational bakery company, faces a unique challenge in managing the inventory of its products. With a typical shelf life of just one week, the accuracy of daily inventory calculations is paramount. Currently, these calculations are performed by direct delivery sales employees who rely on their personal experiences to predict the forces of supply, demand, and consumer behavior at each store. The margin for error in this process is minimal. Underestimating demand results in empty shelves and lost sales, while overestimating demand leads to excess product returns and increased expenses.\n",
    "\n",
    "Grupo Bimbo aims to create a predictive model that can accurately forecast inventory needs based on historical data, thereby optimizing the supply chain and improving efficiency."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea5b71cb",
   "metadata": {
    "papermill": {
     "duration": 0.016143,
     "end_time": "2024-07-15T13:27:47.813149",
     "exception": false,
     "start_time": "2024-07-15T13:27:47.797006",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<h2 align=\"left\"><font color=#E1B12D>Approach</font></h2>\n",
    "\n",
    "<a id=\"toc\"></a>\n",
    "- [1.1 Import Libraries](#1.1)\n",
    "- [1.2 Configuration](#1.2)\n",
    "- [1.3 Important Functions](#1.3)\n",
    "- [1.4 Import Data](#1.4)\n",
    "- [1.5 Quick overview](#1.5)\n",
    "- [2. Exploratory Data Analysis ](#2)\n",
    "- [3.1 Feature Engineering](#3.1)\n",
    "- [3.2 Missing Data Handling](#3.2)\n",
    "- [3.3 Outlier Handling](#3.3)\n",
    "- [3.4 Feature Transformation](#3.4)\n",
    "- [3.5 Feature Creation](#3.5)\n",
    "- [3.6 Feature Selection](#3.6)\n",
    "- [4. Data Pipeline](#4)\n",
    "- [4.1 Pipeline Creation](#4.1)\n",
    "- [4.2 Visualizing the Pipeline ](#4.2)\n",
    "- [5. Model Building](#5)\n",
    "- [5.1 Train Test Split](#5.1)\n",
    "- [5.2 Training the Model](#5.2)\n",
    "- [5.3 Performance Evaluation](#5.3)\n",
    "- [5.4 Ensembling for Performance Improvement](#5.4)\n",
    "- [5.5 Model Explainability](#5.5)\n",
    "- [6. Model Infrence](#6)\n",
    "- [6.1 Loading the Model](#6.1)\n",
    "- [6.2 Data Loading and Prepration](#6.2)\n",
    "- [6.3 Model Forecasting](#6.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8210821",
   "metadata": {
    "papermill": {
     "duration": 0.015801,
     "end_time": "2024-07-15T13:27:47.844342",
     "exception": false,
     "start_time": "2024-07-15T13:27:47.828541",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"1.1\"></a>\n",
    "## <b>1.1 <span style='color:#E1B12D'>Import Libraries</span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3b88d56e",
   "metadata": {
    "_kg_hide-input": true,
    "_kg_hide-output": true,
    "execution": {
     "iopub.execute_input": "2024-07-15T13:27:47.878819Z",
     "iopub.status.busy": "2024-07-15T13:27:47.878305Z",
     "iopub.status.idle": "2024-07-15T13:28:29.036325Z",
     "shell.execute_reply": "2024-07-15T13:28:29.035386Z"
    },
    "papermill": {
     "duration": 41.178455,
     "end_time": "2024-07-15T13:28:29.038777",
     "exception": false,
     "start_time": "2024-07-15T13:27:47.860322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "cudf 24.4.1 requires cubinlinker, which is not installed.\r\n",
      "cudf 24.4.1 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "cudf 24.4.1 requires ptxcompiler, which is not installed.\r\n",
      "cuml 24.4.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "dask-cudf 24.4.1 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "keras-nlp 0.12.1 requires keras-core, which is not installed.\r\n",
      "tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\r\n",
      "aiobotocore 2.13.0 requires aiohttp<4.0.0,>=3.9.2, but you have aiohttp 3.9.1 which is incompatible.\r\n",
      "aiobotocore 2.13.0 requires botocore<1.34.107,>=1.34.70, but you have botocore 1.29.165 which is incompatible.\r\n",
      "cudf 24.4.1 requires cuda-python<12.0a0,>=11.7.1, but you have cuda-python 12.5.0 which is incompatible.\r\n",
      "jupyterlab 4.2.1 requires httpx>=0.25.0, but you have httpx 0.23.3 which is incompatible.\r\n",
      "jupyterlab 4.2.1 requires jupyter-lsp>=2.0.0, but you have jupyter-lsp 1.5.1 which is incompatible.\r\n",
      "jupyterlab-lsp 5.1.0 requires jupyter-lsp>=2.0.0, but you have jupyter-lsp 1.5.1 which is incompatible.\r\n",
      "kfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\r\n",
      "kfp 2.5.0 requires requests-toolbelt<1,>=0.8.0, but you have requests-toolbelt 1.0.0 which is incompatible.\r\n",
      "tensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.3.3 which is incompatible.\r\n",
      "ydata-profiling 4.6.4 requires dacite>=1.8, but you have dacite 1.6.0 which is incompatible.\r\n",
      "ydata-profiling 4.6.4 requires numpy<1.26,>=1.16.0, but you have numpy 1.26.4 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0m\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "cudf 24.4.1 requires cubinlinker, which is not installed.\r\n",
      "cudf 24.4.1 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "cudf 24.4.1 requires ptxcompiler, which is not installed.\r\n",
      "cuml 24.4.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "dask-cudf 24.4.1 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\r\n",
      "cudf 24.4.1 requires cuda-python<12.0a0,>=11.7.1, but you have cuda-python 12.5.0 which is incompatible.\r\n",
      "kfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\r\n",
      "kfp 2.5.0 requires requests-toolbelt<1,>=0.8.0, but you have requests-toolbelt 1.0.0 which is incompatible.\r\n",
      "tensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.3.3 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "!pip3 install -q dagshub\n",
    "!pip3 install -q mlflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "82c03b71",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2024-07-15T13:28:29.072787Z",
     "iopub.status.busy": "2024-07-15T13:28:29.072451Z",
     "iopub.status.idle": "2024-07-15T13:28:41.123852Z",
     "shell.execute_reply": "2024-07-15T13:28:41.122893Z"
    },
    "papermill": {
     "duration": 12.071206,
     "end_time": "2024-07-15T13:28:41.126154",
     "exception": false,
     "start_time": "2024-07-15T13:28:29.054948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# System related tasks\n",
    "import os\n",
    "import gc\n",
    "import warnings\n",
    "\n",
    "# Data manipulation and numerical operations\n",
    "import numpy as np \n",
    "import pandas as pd  \n",
    "import polars as pl\n",
    "\n",
    "# Data visualization\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import plotly.express as px\n",
    "\n",
    "# Scikit-learn model selection and evaluation\n",
    "from sklearn.model_selection import train_test_split, KFold, cross_val_score, TimeSeriesSplit\n",
    "from sklearn.metrics import mean_squared_error, r2_score, roc_auc_score, accuracy_score\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.base import BaseEstimator, TransformerMixin, clone\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.preprocessing import StandardScaler, FunctionTransformer\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "\n",
    "# Machine learning models\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier, VotingRegressor\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\n",
    "\n",
    "# Gradient boosting frameworks\n",
    "from xgboost import XGBClassifier\n",
    "from lightgbm import LGBMClassifier\n",
    "import lightgbm as lgb\n",
    "import xgboost as xgb\n",
    "from catboost import CatBoostClassifier, CatBoostRegressor\n",
    "\n",
    "# Optimization and utilities\n",
    "import optuna\n",
    "import joblib\n",
    "from kaggle_secrets import UserSecretsClient\n",
    "\n",
    "# For Feature Selection\n",
    "from sklearn.feature_selection import SelectKBest, chi2\n",
    "\n",
    "# Experiment tracking and collaboration\n",
    "import dagshub\n",
    "import mlflow\n",
    "\n",
    "# Model Explainability \n",
    "import shap\n",
    "\n",
    "# Ensure warnings are ignored and plots are displayed inline\n",
    "warnings.filterwarnings('ignore')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72262a21",
   "metadata": {
    "papermill": {
     "duration": 0.015952,
     "end_time": "2024-07-15T13:28:41.158835",
     "exception": false,
     "start_time": "2024-07-15T13:28:41.142883",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"1.2\"></a>\n",
    "## <b>1.2 <span style='color:#E1B12D'>Configuration</span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6bce6d78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:28:41.193058Z",
     "iopub.status.busy": "2024-07-15T13:28:41.192289Z",
     "iopub.status.idle": "2024-07-15T13:28:41.205810Z",
     "shell.execute_reply": "2024-07-15T13:28:41.204913Z"
    },
    "papermill": {
     "duration": 0.032712,
     "end_time": "2024-07-15T13:28:41.207654",
     "exception": false,
     "start_time": "2024-07-15T13:28:41.174942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CFG:\n",
    "    \"\"\"\n",
    "    Configuration class for parameters, models, paths, and cross-validation strategies.\n",
    "    Please use caps lock for variable names while filling in parameters.\n",
    "    \"\"\"\n",
    "    # Paths\n",
    "    BASE_PATH = \"/kaggle/input/playground-series-s4e7\"\n",
    "    TRAIN_PATH = f\"{BASE_PATH}/train.csv\"\n",
    "    TEST_PATH = f\"{BASE_PATH}/test.csv\"\n",
    "    \n",
    "    # Columns Rename to ensure names are readable and relevant\n",
    "    COLUMN_RENAME = {\n",
    "        'id': 'ID',\n",
    "        'Gender': 'Gender', \n",
    "        'Age': 'Age', \n",
    "        'Driving_License': 'Driving_License', \n",
    "        'Region_Code': 'Region_Code', \n",
    "        'Previously_Insured': 'Previously_Insured', \n",
    "        'Vehicle_Age': 'Vehicle_Age', \n",
    "        'Vehicle_Damage': 'Vehicle_Damage', \n",
    "        'Annual_Premium': 'Annual_Premium', \n",
    "        'Policy_Sales_Channel': 'Policy_Sales_Channel', \n",
    "        'Vintage': 'Vintage', \n",
    "        'Response': 'Response'\n",
    "    }\n",
    "    \n",
    "    # Data Type Casting Settings to ensure smooth pipeline operation\n",
    "    DATA_TYPES = {\n",
    "        'ID': 'int64',\n",
    "        'Gender': 'category',\n",
    "        'Age': 'int64',\n",
    "        'Driving_License': 'int64',\n",
    "        'Region_Code': 'float64',\n",
    "        'Previously_Insured': 'int64',\n",
    "        'Vehicle_Age': 'category',\n",
    "        'Vehicle_Damage': 'category',\n",
    "        'Annual_Premium': 'float64',\n",
    "        'Policy_Sales_Channel': 'float64',\n",
    "        'Vintage': 'int64',\n",
    "        'Response': 'int64'\n",
    "    }\n",
    "    \n",
    "    # Selecting Categorical variables. High-dimensional variables are excluded\n",
    "    CATEGORICAL_VARIABLES = ( 'Vehicle_Age','Region_Code')\n",
    "    \n",
    "    # Defining Target Variable \n",
    "    TARGET_VARIABLE = 'Response'\n",
    "    \n",
    "    # Model Settings to train the model with hyperparameters\n",
    "    MODELS = {\n",
    "        \"xgboost\": {\n",
    "            \"model\": xgb.XGBClassifier,\n",
    "            \"params\": {\n",
    "                \"n_estimators\": 100,\n",
    "                \"max_depth\": 8,\n",
    "                \"learning_rate\": 0.1,\n",
    "                \"subsample\": 0.8,\n",
    "                \"colsample_bytree\": 0.8,\n",
    "                \"random_state\": 42,\n",
    "                \"tree_method\": \"gpu_hist\", \n",
    "                \"enable_categorical\": True,\n",
    "                \"gpu_id\": 0 \n",
    "            }\n",
    "        },\n",
    "        \"catboost\": {\n",
    "            \"model\": CatBoostClassifier,\n",
    "            \"params\": {\n",
    "                \"iterations\": 100,\n",
    "                \"learning_rate\": 0.1,\n",
    "                \"depth\": 8,\n",
    "                \"verbose\": False,\n",
    "                \"task_type\": \"GPU\", \n",
    "                \"devices\": '0:1' \n",
    "            }\n",
    "        },\n",
    "        \"lightgbm\": {\n",
    "            \"model\": lgb.LGBMClassifier,\n",
    "            \"params\": {\n",
    "                \"n_estimators\": 50,\n",
    "                \"learning_rate\": 0.1,\n",
    "                \"max_depth\": 8,\n",
    "                \"subsample\": 0.8,\n",
    "                \"colsample_bytree\": 0.8,\n",
    "                \"random_state\": 42,\n",
    "                \"device\": \"cpu\", \n",
    "                \"gpu_device_id\": 0,\n",
    "                \"max_bin\": 16, \n",
    "                \"num_leaves\": 16,\n",
    "                \"verbosity\": -1 \n",
    "            }\n",
    "        }\n",
    "    }\n",
    "    SEED = 42\n",
    "    # Cross-Validation Settings for classification problem\n",
    "    CV_STRATEGY = StratifiedKFold(n_splits=5, shuffle=True, random_state=SEED)\n",
    "    \n",
    "    # MLflow Settings to track the performance of model training\n",
    "    MLFLOW_TRACKING_URI = \"https://dagshub.com/agshiv92/GrupoBimbo_InventoryDemand_Solutions.mlflow\"\n",
    "    MLFLOW_EXPERIMENT_NAME = \"Group_Bimbo_Predictive_Model\"\n",
    "    DAGSHUB_REPO_OWNER = \"agshiv92\"\n",
    "    DAGSHUB_REPO = \"GrupoBimbo_InventoryDemand_Solutions\"\n",
    "    MLFLOW_URI = \"https://dagshub.com/username/repository_name.mlflow\"\n",
    "    MLFLOW_LOCAL_URI = \"/kaggle/working/mlflow\"\n",
    "    \n",
    "    # Setting seed to ensure reproducibility\n",
    "    \n",
    "    \n",
    "    # Model Save Path \n",
    "    MODEL_SAVE_PATH = '/kaggle/working/models'\n",
    "    EXPERIMENT_RECORDING = 'LOCAL'\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbdedbe8",
   "metadata": {
    "papermill": {
     "duration": 0.015558,
     "end_time": "2024-07-15T13:28:41.239040",
     "exception": false,
     "start_time": "2024-07-15T13:28:41.223482",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"1.3\"></a>\n",
    "## <b>1.3 <span style='color:#E1B12D'>Important Functions </span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a6b11b46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:28:41.271605Z",
     "iopub.status.busy": "2024-07-15T13:28:41.271277Z",
     "iopub.status.idle": "2024-07-15T13:28:41.290395Z",
     "shell.execute_reply": "2024-07-15T13:28:41.289535Z"
    },
    "papermill": {
     "duration": 0.037819,
     "end_time": "2024-07-15T13:28:41.292460",
     "exception": false,
     "start_time": "2024-07-15T13:28:41.254641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Defining some important function which will be used for the analysis of data\n",
    "def inspect_columns(df, df_name):\n",
    "    \"\"\"A helper function that does a better job than df.info() and df.describe()\"\"\"\n",
    "    \n",
    "    total_rows = len(df)\n",
    "    result = pd.DataFrame({\n",
    "        'total_rows': [total_rows] * df.shape[1],\n",
    "        'rows_with_missing_values': df.isnull().sum(),\n",
    "        'unique': df.nunique() == total_rows,\n",
    "        'cardinality': df.nunique(),\n",
    "        'with_null': df.isna().any(),\n",
    "        'null_pct': round((df.isnull().sum() / total_rows) * 100, 2),\n",
    "        '1st_row': df.iloc[0],\n",
    "        'random_row': df.iloc[np.random.randint(low=0, high=total_rows)],\n",
    "        'last_row': df.iloc[-1],\n",
    "        'dtype': df.dtypes,\n",
    "    })\n",
    "    \n",
    "    # Print the name of the dataframe\n",
    "    print(f\"\\n{'='*10} {df_name} {'='*10}\\n\")\n",
    "    \n",
    "    # Print the head of the dataframe\n",
    "    print(\"First few rows of the dataframe:\\n\")\n",
    "    display(df.head())\n",
    "    \n",
    "    # Print the resulting statistics\n",
    "    print(\"Detailed statistics:\\n\")\n",
    "    display(result)\n",
    "    \n",
    "def cast_data_types(df, data_types):\n",
    "    \"\"\"A helper function to cast the pre determined data type for the columns in dataframe\"\"\"\n",
    "    for column,data_type in data_types.items():\n",
    "        if column in df.columns:\n",
    "            df[column] = df[column].astype(data_type)\n",
    "    return df\n",
    "\n",
    "def get_or_create_experiment_id(name):\n",
    "    \"\"\"Function to create or get the experiment id\"\"\"\n",
    "    exp = mlflow.get_experiment_by_name(name)\n",
    "    if exp is None:\n",
    "        exp_id = mlflow.create_experiment(name)\n",
    "        return exp_id\n",
    "    return exp.experiment_id\n",
    "\n",
    "def reduce_memory_usage(df):\n",
    "    \"\"\"Reduce memory usage of a dataframe by downcasting data types.\"\"\"\n",
    "    start_mem = df.memory_usage().sum() / 1024**2\n",
    "#     print(f'Memory usage of dataframe is {start_mem:.2f} MB')\n",
    "    \n",
    "    for col in df.columns:\n",
    "        col_type = df[col].dtype\n",
    "        # Skip timestamp columns\n",
    "        if pd.api.types.is_datetime64_any_dtype(df[col]):\n",
    "            continue\n",
    "        if (col_type != object) & (col_type != object):\n",
    "            c_min = df[col].min()\n",
    "            c_max = df[col].max()\n",
    "            if str(col_type)[:3] == 'int':\n",
    "                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n",
    "                    df[col] = df[col].astype(np.int8)\n",
    "                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n",
    "                    df[col] = df[col].astype(np.int16)\n",
    "                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n",
    "                    df[col] = df[col].astype(np.int32)\n",
    "                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n",
    "                    df[col] = df[col].astype(np.int64)\n",
    "            else:\n",
    "                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n",
    "                    df[col] = df[col].astype(np.float16)\n",
    "                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n",
    "                    df[col] = df[col].astype(np.float32)\n",
    "                else:\n",
    "                    df[col] = df[col].astype(np.float64)\n",
    "        else:\n",
    "            df[col] = df[col].astype('category')\n",
    "    \n",
    "    end_mem = df.memory_usage().sum() / 1024**2\n",
    "#     print(f'Memory usage after optimization is: {end_mem:.2f} MB')\n",
    "    print(f'Decreased by {100 * (start_mem - end_mem) / start_mem:.1f}%')\n",
    "    return df\n",
    "\n",
    "def check_and_create_directory(directory_path):\n",
    "    \"\"\" To create directory if not exist\"\"\"\n",
    "    if not os.path.exists(directory_path):\n",
    "        os.makedirs(directory_path)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01cba750",
   "metadata": {
    "papermill": {
     "duration": 0.015623,
     "end_time": "2024-07-15T13:28:41.324288",
     "exception": false,
     "start_time": "2024-07-15T13:28:41.308665",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"1.4\"></a>\n",
    "## <b>1.4 <span style='color:#E1B12D'>Import Data</span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f1a1c64f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:28:41.357745Z",
     "iopub.status.busy": "2024-07-15T13:28:41.357066Z",
     "iopub.status.idle": "2024-07-15T13:29:01.231644Z",
     "shell.execute_reply": "2024-07-15T13:29:01.230815Z"
    },
    "papermill": {
     "duration": 19.894118,
     "end_time": "2024-07-15T13:29:01.234045",
     "exception": false,
     "start_time": "2024-07-15T13:28:41.339927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load datasets\n",
    "train_df = pd.read_csv(CFG.TRAIN_PATH)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dc258265",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:01.267050Z",
     "iopub.status.busy": "2024-07-15T13:29:01.266748Z",
     "iopub.status.idle": "2024-07-15T13:29:01.290267Z",
     "shell.execute_reply": "2024-07-15T13:29:01.289428Z"
    },
    "papermill": {
     "duration": 0.042176,
     "end_time": "2024-07-15T13:29:01.292313",
     "exception": false,
     "start_time": "2024-07-15T13:29:01.250137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Vehicle_Age</th>\n",
       "      <th>Vehicle_Damage</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>65101.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>&gt; 2 Years</td>\n",
       "      <td>Yes</td>\n",
       "      <td>58911.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>288</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Female</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>38043.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>254</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>76</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Female</td>\n",
       "      <td>36</td>\n",
       "      <td>1</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>31951.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>294</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\n",
       "0   0    Male   21                1         35.0                   0   \n",
       "1   1    Male   43                1         28.0                   0   \n",
       "2   2  Female   25                1         14.0                   1   \n",
       "3   3  Female   35                1          1.0                   0   \n",
       "4   4  Female   36                1         15.0                   1   \n",
       "\n",
       "  Vehicle_Age Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  Vintage  \\\n",
       "0    1-2 Year            Yes         65101.0                 124.0      187   \n",
       "1   > 2 Years            Yes         58911.0                  26.0      288   \n",
       "2    < 1 Year             No         38043.0                 152.0      254   \n",
       "3    1-2 Year            Yes          2630.0                 156.0       76   \n",
       "4    1-2 Year             No         31951.0                 152.0      294   \n",
       "\n",
       "   Response  \n",
       "0         0  \n",
       "1         1  \n",
       "2         0  \n",
       "3         0  \n",
       "4         0  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "df3ae118",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:01.325705Z",
     "iopub.status.busy": "2024-07-15T13:29:01.325104Z",
     "iopub.status.idle": "2024-07-15T13:29:01.405005Z",
     "shell.execute_reply": "2024-07-15T13:29:01.404090Z"
    },
    "papermill": {
     "duration": 0.098849,
     "end_time": "2024-07-15T13:29:01.407241",
     "exception": false,
     "start_time": "2024-07-15T13:29:01.308392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df.head(10000).to_csv('train_df.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8d25788",
   "metadata": {
    "papermill": {
     "duration": 0.016031,
     "end_time": "2024-07-15T13:29:01.439579",
     "exception": false,
     "start_time": "2024-07-15T13:29:01.423548",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"1.5\"></a>\n",
    "## <b>1.5 <span style='color:#E1B12D'>Quick overview</span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "85452388",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:01.474052Z",
     "iopub.status.busy": "2024-07-15T13:29:01.473276Z",
     "iopub.status.idle": "2024-07-15T13:29:19.413454Z",
     "shell.execute_reply": "2024-07-15T13:29:19.412412Z"
    },
    "papermill": {
     "duration": 17.959275,
     "end_time": "2024-07-15T13:29:19.415516",
     "exception": false,
     "start_time": "2024-07-15T13:29:01.456241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "========== Training Dataframe ==========\n",
      "\n",
      "First few rows of the dataframe:\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Vehicle_Age</th>\n",
       "      <th>Vehicle_Damage</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>65101.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>&gt; 2 Years</td>\n",
       "      <td>Yes</td>\n",
       "      <td>58911.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>288</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Female</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>38043.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>254</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>76</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Female</td>\n",
       "      <td>36</td>\n",
       "      <td>1</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>31951.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>294</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\n",
       "0   0    Male   21                1         35.0                   0   \n",
       "1   1    Male   43                1         28.0                   0   \n",
       "2   2  Female   25                1         14.0                   1   \n",
       "3   3  Female   35                1          1.0                   0   \n",
       "4   4  Female   36                1         15.0                   1   \n",
       "\n",
       "  Vehicle_Age Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  Vintage  \\\n",
       "0    1-2 Year            Yes         65101.0                 124.0      187   \n",
       "1   > 2 Years            Yes         58911.0                  26.0      288   \n",
       "2    < 1 Year             No         38043.0                 152.0      254   \n",
       "3    1-2 Year            Yes          2630.0                 156.0       76   \n",
       "4    1-2 Year             No         31951.0                 152.0      294   \n",
       "\n",
       "   Response  \n",
       "0         0  \n",
       "1         1  \n",
       "2         0  \n",
       "3         0  \n",
       "4         0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Detailed statistics:\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_rows</th>\n",
       "      <th>rows_with_missing_values</th>\n",
       "      <th>unique</th>\n",
       "      <th>cardinality</th>\n",
       "      <th>with_null</th>\n",
       "      <th>null_pct</th>\n",
       "      <th>1st_row</th>\n",
       "      <th>random_row</th>\n",
       "      <th>last_row</th>\n",
       "      <th>dtype</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <td>11504798</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>11504798</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4239248</td>\n",
       "      <td>11504797</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <td>11504798</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>Male</td>\n",
       "      <td>Male</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>11504798</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>66</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21</td>\n",
       "      <td>46</td>\n",
       "      <td>25</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Driving_License</th>\n",
       "      <td>11504798</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Region_Code</th>\n",
       "      <td>11504798</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>54</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Previously_Insured</th>\n",
       "      <td>11504798</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vehicle_Age</th>\n",
       "      <td>11504798</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vehicle_Damage</th>\n",
       "      <td>11504798</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Premium</th>\n",
       "      <td>11504798</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>51728</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65101.0</td>\n",
       "      <td>57936.0</td>\n",
       "      <td>32855.0</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <td>11504798</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>152</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vintage</th>\n",
       "      <td>11504798</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>290</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187</td>\n",
       "      <td>103</td>\n",
       "      <td>189</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Response</th>\n",
       "      <td>11504798</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      total_rows  rows_with_missing_values  unique  \\\n",
       "id                      11504798                         0    True   \n",
       "Gender                  11504798                         0   False   \n",
       "Age                     11504798                         0   False   \n",
       "Driving_License         11504798                         0   False   \n",
       "Region_Code             11504798                         0   False   \n",
       "Previously_Insured      11504798                         0   False   \n",
       "Vehicle_Age             11504798                         0   False   \n",
       "Vehicle_Damage          11504798                         0   False   \n",
       "Annual_Premium          11504798                         0   False   \n",
       "Policy_Sales_Channel    11504798                         0   False   \n",
       "Vintage                 11504798                         0   False   \n",
       "Response                11504798                         0   False   \n",
       "\n",
       "                      cardinality  with_null  null_pct   1st_row random_row  \\\n",
       "id                       11504798      False       0.0         0    4239248   \n",
       "Gender                          2      False       0.0      Male       Male   \n",
       "Age                            66      False       0.0        21         46   \n",
       "Driving_License                 2      False       0.0         1          1   \n",
       "Region_Code                    54      False       0.0      35.0       28.0   \n",
       "Previously_Insured              2      False       0.0         0          0   \n",
       "Vehicle_Age                     3      False       0.0  1-2 Year   1-2 Year   \n",
       "Vehicle_Damage                  2      False       0.0       Yes        Yes   \n",
       "Annual_Premium              51728      False       0.0   65101.0    57936.0   \n",
       "Policy_Sales_Channel          152      False       0.0     124.0      124.0   \n",
       "Vintage                       290      False       0.0       187        103   \n",
       "Response                        2      False       0.0         0          0   \n",
       "\n",
       "                      last_row    dtype  \n",
       "id                    11504797    int64  \n",
       "Gender                    Male   object  \n",
       "Age                         25    int64  \n",
       "Driving_License              1    int64  \n",
       "Region_Code               28.0  float64  \n",
       "Previously_Insured           1    int64  \n",
       "Vehicle_Age           < 1 Year   object  \n",
       "Vehicle_Damage              No   object  \n",
       "Annual_Premium         32855.0  float64  \n",
       "Policy_Sales_Channel     152.0  float64  \n",
       "Vintage                    189    int64  \n",
       "Response                     0    int64  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "inspect_columns(train_df,\"Training Dataframe\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fe27746",
   "metadata": {
    "papermill": {
     "duration": 0.016809,
     "end_time": "2024-07-15T13:29:19.449331",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.432522",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "#### About Data:\n",
    "    \n",
    "The dataset provided contains information related to vehicle insurance. Here is a detailed description of the columns:\n",
    "\n",
    "#### Columns Description\n",
    "\n",
    "- **id**: Unique identifier for each record.\n",
    "- **Gender**: Gender of the insured individual.\n",
    "- **Age**: Age of the insured individual.\n",
    "- **Driving_License**: Indicator if the individual holds a driving license (1: Yes, 0: No).\n",
    "- **Region_Code**: Unique code for the region of the insured individual.\n",
    "- **Previously_Insured**: Indicator if the individual was previously insured (1: Yes, 0: No).\n",
    "- **Vehicle_Age**: Age of the vehicle ('< 1 Year', '1-2 Year', '> 2 Years').\n",
    "- **Vehicle_Damage**: Indicator if the vehicle was damaged previously (Yes/No).\n",
    "- **Annual_Premium**: The annual premium amount for the insurance.\n",
    "- **Policy_Sales_Channel**: Sales channel through which the policy was sold.\n",
    "- **Vintage**: Number of days the customer has been associated with the insurance company.\n",
    "- **Response**: Response from the customer (1: Interested, 0: Not interested)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db2e5852",
   "metadata": {
    "papermill": {
     "duration": 0.016518,
     "end_time": "2024-07-15T13:29:19.482664",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.466146",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"toc\"></a>\n",
    "\n",
    "<a href=\"#toc\" style=\"background-color: #E1B12D; color: #ffffff; padding: 7px 10px; text-decoration: none; border-radius: 50px;\">Back to top</a><a id=\"toc\"></a>\n",
    "<a id=\"2\"></a>\n",
    "## <b>2 <span style='color:#E1B12D'> Exploratory Data Analysis</span></b> "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1b2923d",
   "metadata": {
    "papermill": {
     "duration": 0.016644,
     "end_time": "2024-07-15T13:29:19.515913",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.499269",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "EDA for this is available here https://www.kaggle.com/code/agshiv92/group-bimbo-eda"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "615e962e",
   "metadata": {
    "papermill": {
     "duration": 0.016352,
     "end_time": "2024-07-15T13:29:19.548759",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.532407",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3\"></a>\n",
    "## <b>3 <span style='color:#E1B12D'> Feature Engineering </span></b> \n",
    "### <b>3.1 <span style='color:#E1B12D'> Missing Data Handling </span></b> "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7883753",
   "metadata": {
    "papermill": {
     "duration": 0.055884,
     "end_time": "2024-07-15T13:29:19.621126",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.565242",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "There is no missing data in the dataframe. If there are missing data there are there are below methods to handle missing data. \n",
    "\n",
    "### Handling Missing Data\n",
    "\n",
    "1. **Remove Missing Data**\n",
    "   - Remove rows with missing values\n",
    "   - Remove columns with missing values\n",
    "\n",
    "2. **Impute Missing Data**\n",
    "   - **Mean Imputation**: Replace missing values with the mean.\n",
    "   - **Median Imputation**: Replace missing values with the median.\n",
    "   - **Mode Imputation**: Replace missing values with the mode.\n",
    "   - **Forward Fill**: Replace missing values with the previous value.\n",
    "   - **Backward Fill**: Replace missing values with the next value.\n",
    "   - **Interpolation**: Use linear interpolation to estimate missing values.\n",
    "   - **K-Nearest Neighbors (KNN) Imputation**: Use the nearest neighbors to impute missing values.\n",
    "   - **Predictive Imputation**: Use regression or other models to predict missing values.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "425585ea",
   "metadata": {
    "papermill": {
     "duration": 0.016927,
     "end_time": "2024-07-15T13:29:19.654927",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.638000",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3.2\"></a>\n",
    "### <b>3.2 <span style='color:#E1B12D'> Outlier Handling </span></b> "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6722f3b3",
   "metadata": {
    "papermill": {
     "duration": 0.017889,
     "end_time": "2024-07-15T13:29:19.689496",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.671607",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3.3\"></a>\n",
    "### <b>3.3 <span style='color:#E1B12D'> Feature Transformation </span></b> "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a073b68",
   "metadata": {
    "papermill": {
     "duration": 0.016398,
     "end_time": "2024-07-15T13:29:19.722509",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.706111",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 3.3.0 Data Prepration\n",
    "Data prepration by giving appropriate column name and converting the data in appropriate data type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2206ce7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:19.757576Z",
     "iopub.status.busy": "2024-07-15T13:29:19.756879Z",
     "iopub.status.idle": "2024-07-15T13:29:19.761255Z",
     "shell.execute_reply": "2024-07-15T13:29:19.760405Z"
    },
    "papermill": {
     "duration": 0.024028,
     "end_time": "2024-07-15T13:29:19.763143",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.739115",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def data_prepration(df):\n",
    "    df = reduce_memory_usage(df)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f14dbd4b",
   "metadata": {
    "papermill": {
     "duration": 0.016407,
     "end_time": "2024-07-15T13:29:19.796246",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.779839",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 3.3.1 One Hot Encoding\n",
    "\n",
    "I have chosen to avoid one-hot encoding for categorical variables. Instead, I will be leveraging advanced machine learning algorithms like LightGBM, which natively support categorical data. This decision is driven by three key factors:- Efficiency, Performance and \n",
    "Simplicity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bd67564c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:19.830891Z",
     "iopub.status.busy": "2024-07-15T13:29:19.830602Z",
     "iopub.status.idle": "2024-07-15T13:29:19.836239Z",
     "shell.execute_reply": "2024-07-15T13:29:19.835426Z"
    },
    "papermill": {
     "duration": 0.02525,
     "end_time": "2024-07-15T13:29:19.838202",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.812952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def one_hot_encode_train(train_df, categorical_columns):\n",
    "    encoder = OneHotEncoder(drop='first', sparse=False)\n",
    "    encoded_df = encoder.fit_transform(train_df[categorical_columns])\n",
    "    encoded_df = pd.DataFrame(encoded_df, columns=encoder.get_feature_names_out(categorical_columns))\n",
    "    train_df = train_df.drop(columns=categorical_columns).reset_index(drop=True)\n",
    "    train_df = pd.concat([train_df, encoded_df], axis=1)\n",
    "    joblib.dump(encoder, 'encoder.pkl')  # Save the fitted encoder to a file\n",
    "    return train_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "df0f4ad4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:19.872960Z",
     "iopub.status.busy": "2024-07-15T13:29:19.872675Z",
     "iopub.status.idle": "2024-07-15T13:29:19.877180Z",
     "shell.execute_reply": "2024-07-15T13:29:19.876378Z"
    },
    "papermill": {
     "duration": 0.02384,
     "end_time": "2024-07-15T13:29:19.879016",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.855176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def map_vehicle_age(df):\n",
    "    vehicle_age_mapping = {'< 1 Year': 0, '1-2 Year': 1, '> 2 Years': 2}\n",
    "    df['Vehicle_Age'] = df['Vehicle_Age'].map(vehicle_age_mapping)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56ac6d20",
   "metadata": {
    "papermill": {
     "duration": 0.016439,
     "end_time": "2024-07-15T13:29:19.912234",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.895795",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 3.3.2 Standard Scaler\n",
    "Lagged features are the demand in previouse week for the same product and client. This feature is helpful to understand the dempendency of the demand on previous history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5fe889a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:19.946849Z",
     "iopub.status.busy": "2024-07-15T13:29:19.946570Z",
     "iopub.status.idle": "2024-07-15T13:29:19.951118Z",
     "shell.execute_reply": "2024-07-15T13:29:19.950419Z"
    },
    "papermill": {
     "duration": 0.02405,
     "end_time": "2024-07-15T13:29:19.952970",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.928920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def standard_scale_train(train_df, numerical_columns):\n",
    "    scaler = StandardScaler()\n",
    "    train_df[numerical_columns] = scaler.fit_transform(train_df[numerical_columns])\n",
    "    joblib.dump(scaler, 'scaler.pkl')  # Save the fitted scaler to a file\n",
    "    return train_df\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9d5f81a",
   "metadata": {
    "papermill": {
     "duration": 0.016572,
     "end_time": "2024-07-15T13:29:19.986282",
     "exception": false,
     "start_time": "2024-07-15T13:29:19.969710",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 3.3.3 Rolling Features\n",
    "Rolling features capture the aggregated values over a specific window of time, such as the average or sum of demand over the past few weeks. These features are instrumental in understanding trends and patterns in the data.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "291197ee",
   "metadata": {
    "papermill": {
     "duration": 0.016499,
     "end_time": "2024-07-15T13:29:20.019631",
     "exception": false,
     "start_time": "2024-07-15T13:29:20.003132",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3.4\"></a>\n",
    "### <b>3.4 <span style='color:#E1B12D'> Feature Creation </span></b> \n",
    "\n",
    "#### 3.4.1 Sales Growth"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6bdea160",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:20.054394Z",
     "iopub.status.busy": "2024-07-15T13:29:20.053801Z",
     "iopub.status.idle": "2024-07-15T13:29:20.058525Z",
     "shell.execute_reply": "2024-07-15T13:29:20.057679Z"
    },
    "papermill": {
     "duration": 0.024233,
     "end_time": "2024-07-15T13:29:20.060452",
     "exception": false,
     "start_time": "2024-07-15T13:29:20.036219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def add_interaction_features(df, col1, col2):\n",
    "    interaction_feature_name = f\"{col1}_{col2}\"\n",
    "    df[interaction_feature_name] = df[col1] * df[col2]\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1b26d240",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:20.095085Z",
     "iopub.status.busy": "2024-07-15T13:29:20.094608Z",
     "iopub.status.idle": "2024-07-15T13:29:36.529923Z",
     "shell.execute_reply": "2024-07-15T13:29:36.529012Z"
    },
    "papermill": {
     "duration": 16.454813,
     "end_time": "2024-07-15T13:29:36.531922",
     "exception": false,
     "start_time": "2024-07-15T13:29:20.077109",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decreased by 78.1%\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numerical_cols = ['Age', 'Annual_Premium', 'Vintage']\n",
    "categorical_cols = ['Gender', 'Vehicle_Damage']\n",
    "train_df = data_prepration(train_df)\n",
    "train_df = one_hot_encode_train(train_df, categorical_cols)\n",
    "train_df = map_vehicle_age(train_df)\n",
    "train_df = standard_scale_train(train_df, numerical_cols)\n",
    "train_df = add_interaction_features(train_df, 'Age', 'Annual_Premium')\n",
    "train_df = add_interaction_features(train_df, 'Age', 'Vintage')\n",
    "train_df['Region_Code'] = train_df['Region_Code'].astype('int')\n",
    "train_df['Region_Code'] = train_df['Region_Code'].astype('category')\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71f75aec",
   "metadata": {
    "papermill": {
     "duration": 0.016784,
     "end_time": "2024-07-15T13:29:36.566260",
     "exception": false,
     "start_time": "2024-07-15T13:29:36.549476",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 3.4.2 Client Total Sales"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "013356c0",
   "metadata": {
    "papermill": {
     "duration": 0.016761,
     "end_time": "2024-07-15T13:29:36.600031",
     "exception": false,
     "start_time": "2024-07-15T13:29:36.583270",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3.5\"></a>\n",
    "### <b>3.5 <span style='color:#E1B12D'> Feature Selection </span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "894ceada",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:36.634993Z",
     "iopub.status.busy": "2024-07-15T13:29:36.634658Z",
     "iopub.status.idle": "2024-07-15T13:29:37.464341Z",
     "shell.execute_reply": "2024-07-15T13:29:37.463404Z"
    },
    "papermill": {
     "duration": 0.851042,
     "end_time": "2024-07-15T13:29:37.467890",
     "exception": false,
     "start_time": "2024-07-15T13:29:36.616848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "numeric_columns = [col for col in train_df.columns if col not in CFG.CATEGORICAL_VARIABLES]\n",
    "corr_matrix = train_df.head(10000)[numeric_columns].corr()\n",
    "# Plot the heatmap\n",
    "plt.figure(figsize=(20, 16))\n",
    "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')\n",
    "plt.title('Correlation Matrix with Heatmap')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b6d1b2c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:37.507958Z",
     "iopub.status.busy": "2024-07-15T13:29:37.507656Z",
     "iopub.status.idle": "2024-07-15T13:29:37.512622Z",
     "shell.execute_reply": "2024-07-15T13:29:37.511765Z"
    },
    "papermill": {
     "duration": 0.027195,
     "end_time": "2024-07-15T13:29:37.514634",
     "exception": false,
     "start_time": "2024-07-15T13:29:37.487439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def clean_column_names(columns):\n",
    "#     \"\"\"Clean column names by replacing problematic characters.\"\"\"\n",
    "#     return [col.replace('[', '').replace(']', '').replace('<', '').replace('>', '') for col in columns]\n",
    "\n",
    "# def feature_selection(df, CFG, number_of_features):\n",
    "#     \"\"\"Perform feature selection using XGBoost feature importances for classification\"\"\"\n",
    "#     sample_df = df.sample(frac=0.05, random_state=CFG.SEED)\n",
    "#     X = sample_df.drop(columns=CFG.TARGET_VARIABLE)\n",
    "#     y = sample_df[CFG.TARGET_VARIABLE]\n",
    "\n",
    "#     # Clean column names\n",
    "#     X.columns = clean_column_names(X.columns)\n",
    "\n",
    "#     model = xgb.XGBClassifier(n_estimators=100, random_state=CFG.SEED, tree_method='hist')\n",
    "\n",
    "#     # Fit the model\n",
    "#     model.fit(X, y)\n",
    "#     importances = model.feature_importances_\n",
    "#     indices = np.argsort(importances)[::-1]\n",
    "\n",
    "#     # Print the feature ranking\n",
    "#     print(\"Feature ranking:\")\n",
    "#     feature_ranking = [(X.columns[indices[f]], importances[indices[f]]) for f in range(X.shape[1])]\n",
    "#     for rank, (feature, importance) in enumerate(feature_ranking, start=1):\n",
    "#         print(f\"{rank}. feature {feature} ({importance})\")\n",
    "\n",
    "#     # Get the top features\n",
    "#     selected_features = X.columns[indices[:number_of_features]]  # Adjust the number of features as needed\n",
    "#     print(\"Selected Features by XGBoost:\", selected_features)\n",
    "\n",
    "#     return selected_features\n",
    "\n",
    "# # Assuming train_df and CFG are defined as before\n",
    "# selected_features = feature_selection(train_df, CFG, 16)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "10b91932",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:37.554777Z",
     "iopub.status.busy": "2024-07-15T13:29:37.554213Z",
     "iopub.status.idle": "2024-07-15T13:29:37.558169Z",
     "shell.execute_reply": "2024-07-15T13:29:37.557356Z"
    },
    "papermill": {
     "duration": 0.025836,
     "end_time": "2024-07-15T13:29:37.559968",
     "exception": false,
     "start_time": "2024-07-15T13:29:37.534132",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def selected_features_dataframe(df,selected_features):\n",
    "#     \"\"\"Select the important features from dataframe\"\"\"\n",
    "#     selected_features = list(selected_features)\n",
    "#     selected_features.append(CFG.TARGET_VARIABLE)\n",
    "#     df=df[selected_features]\n",
    "#     return df \n",
    "# train_df = selected_features_dataframe(train_df,selected_features)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98edf888",
   "metadata": {
    "papermill": {
     "duration": 0.018797,
     "end_time": "2024-07-15T13:29:37.597891",
     "exception": false,
     "start_time": "2024-07-15T13:29:37.579094",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"toc\"></a>\n",
    "\n",
    "<a href=\"#toc\" style=\"background-color: #E1B12D; color: #ffffff; padding: 7px 10px; text-decoration: none; border-radius: 50px;\">Back to top</a><a id=\"toc\"></a>\n",
    "<a id=\"4\"></a>\n",
    "## <b>4 <span style='color:#E1B12D'> Data Pipeline </span></b> \n",
    "### <b>4.1 <span style='color:#E1B12D'> Pipeline Creation </span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "df193c03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:37.637031Z",
     "iopub.status.busy": "2024-07-15T13:29:37.636753Z",
     "iopub.status.idle": "2024-07-15T13:29:37.641821Z",
     "shell.execute_reply": "2024-07-15T13:29:37.641068Z"
    },
    "papermill": {
     "duration": 0.026728,
     "end_time": "2024-07-15T13:29:37.643697",
     "exception": false,
     "start_time": "2024-07-15T13:29:37.616969",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def preprocess_train_data(train_df, numerical_columns, categorical_columns):\n",
    "    # Map Vehicle Age\n",
    "    train_df = map_vehicle_age(train_df)\n",
    "\n",
    "    # Standard Scaling\n",
    "    train_df = standard_scale_train(train_df, numerical_columns)\n",
    "    # One-Hot Encoding\n",
    "    train_df = one_hot_encode_train(train_df, categorical_columns)\n",
    "    # Add Interaction Features\n",
    "    train_df = add_interaction_features(train_df, 'Age', 'Annual_Premium')\n",
    "    train_df = add_interaction_features(train_df, 'Age', 'Vintage')\n",
    "    return train_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6f17c52f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:37.683280Z",
     "iopub.status.busy": "2024-07-15T13:29:37.682986Z",
     "iopub.status.idle": "2024-07-15T13:29:37.690247Z",
     "shell.execute_reply": "2024-07-15T13:29:37.689495Z"
    },
    "papermill": {
     "duration": 0.029318,
     "end_time": "2024-07-15T13:29:37.692109",
     "exception": false,
     "start_time": "2024-07-15T13:29:37.662791",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def preprocess_test_data(test_df, numerical_columns, categorical_columns):\n",
    "    # Map Vehicle Age\n",
    "    test_df = map_vehicle_age(test_df)\n",
    "\n",
    "    # Load and apply Standard Scaler\n",
    "    scaler = joblib.load('scaler.pkl')\n",
    "    test_df[numerical_columns] = scaler.transform(test_df[numerical_columns])\n",
    "\n",
    "    # Load and apply One-Hot Encoder\n",
    "    encoder = joblib.load('encoder.pkl')\n",
    "    encoded_df = encoder.transform(test_df[categorical_columns])\n",
    "    encoded_df = pd.DataFrame(encoded_df, columns=encoder.get_feature_names_out(categorical_columns))\n",
    "    test_df = test_df.drop(columns=categorical_columns).reset_index(drop=True)\n",
    "    test_df = pd.concat([test_df, encoded_df], axis=1)\n",
    "\n",
    "    # Add Interaction Features\n",
    "    test_df = add_interaction_features(test_df, 'Age', 'Annual_Premium')\n",
    "    test_df = add_interaction_features(test_df, 'Age', 'Vintage')\n",
    "    test_df['Region_Code'] = test_df['Region_Code'].astype('int')\n",
    "    test_df['Region_Code'] = test_df['Region_Code'].astype('category')\n",
    "    test_df['Vehicle_Age'] = test_df['Vehicle_Age'].astype('category')\n",
    "    return test_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5da9b53f",
   "metadata": {
    "papermill": {
     "duration": 0.019102,
     "end_time": "2024-07-15T13:29:37.730202",
     "exception": false,
     "start_time": "2024-07-15T13:29:37.711100",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"4.2\"></a>\n",
    "### <b>4.2 <span style='color:#E1B12D'> Visualizing the Pipeline </span></b> "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2880a9ce",
   "metadata": {
    "papermill": {
     "duration": 0.018856,
     "end_time": "2024-07-15T13:29:37.769332",
     "exception": false,
     "start_time": "2024-07-15T13:29:37.750476",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"toc\"></a>\n",
    "\n",
    "<a href=\"#toc\" style=\"background-color: #E1B12D; color: #ffffff; padding: 7px 10px; text-decoration: none; border-radius: 50px;\">Back to top</a><a id=\"toc\"></a>\n",
    "<a id=\"5\"></a>\n",
    "## <b>5 <span style='color:#E1B12D'> Model Building </span></b> \n",
    "### <b>5.1 <span style='color:#E1B12D'> Train Test Split </span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3ba79ebb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:37.808684Z",
     "iopub.status.busy": "2024-07-15T13:29:37.808114Z",
     "iopub.status.idle": "2024-07-15T13:29:37.813276Z",
     "shell.execute_reply": "2024-07-15T13:29:37.812534Z"
    },
    "papermill": {
     "duration": 0.026931,
     "end_time": "2024-07-15T13:29:37.815226",
     "exception": false,
     "start_time": "2024-07-15T13:29:37.788295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def prepare_train_test_data(df, target_column, test_size=0.2, random_state=42):\n",
    "    \"\"\"Splits the data into training and testing sets.\"\"\"\n",
    "    X = df.drop(columns=target_column)\n",
    "    y = df[target_column]\n",
    "\n",
    "    # Split the data into training and testing sets\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state, stratify=y)\n",
    "    return X_train, y_train, X_test, y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d0bda94d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:37.854412Z",
     "iopub.status.busy": "2024-07-15T13:29:37.854136Z",
     "iopub.status.idle": "2024-07-15T13:29:44.747135Z",
     "shell.execute_reply": "2024-07-15T13:29:44.746372Z"
    },
    "papermill": {
     "duration": 6.915244,
     "end_time": "2024-07-15T13:29:44.749519",
     "exception": false,
     "start_time": "2024-07-15T13:29:37.834275",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, y_train, X_test, y_test = prepare_train_test_data(train_df, target_column='Response')\n",
    "del train_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "420d4f73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:44.790954Z",
     "iopub.status.busy": "2024-07-15T13:29:44.790655Z",
     "iopub.status.idle": "2024-07-15T13:29:44.998166Z",
     "shell.execute_reply": "2024-07-15T13:29:44.997243Z"
    },
    "papermill": {
     "duration": 0.230802,
     "end_time": "2024-07-15T13:29:45.000106",
     "exception": false,
     "start_time": "2024-07-15T13:29:44.769304",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15725"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gc.collect()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c74c5e7",
   "metadata": {
    "papermill": {
     "duration": 0.019536,
     "end_time": "2024-07-15T13:29:45.039426",
     "exception": false,
     "start_time": "2024-07-15T13:29:45.019890",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.2\"></a>\n",
    "### <b>5.2 <span style='color:#E1B12D'> Training the Model </span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2aee86a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:45.079958Z",
     "iopub.status.busy": "2024-07-15T13:29:45.079650Z",
     "iopub.status.idle": "2024-07-15T13:29:45.091888Z",
     "shell.execute_reply": "2024-07-15T13:29:45.091017Z"
    },
    "papermill": {
     "duration": 0.034905,
     "end_time": "2024-07-15T13:29:45.093833",
     "exception": false,
     "start_time": "2024-07-15T13:29:45.058928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_and_evaluate(model_config, X_train, y_train, experiment_id, save_best_model=True, save_dir=CFG.MODEL_SAVE_PATH, categorical_features=CFG.CATEGORICAL_VARIABLES):\n",
    "    \"\"\"\n",
    "    Train and evaluate a model using time series cross-validation for classification.\n",
    "    \"\"\"\n",
    "    skf = StratifiedKFold(n_splits=2, shuffle=True, random_state=CFG.SEED)\n",
    "    cv_scores = []\n",
    "    best_score = float('-inf')\n",
    "    best_model = None\n",
    "    model_type = model_config['model'].__name__\n",
    "    model = model_config['model'](**model_config['params'])\n",
    "\n",
    "    with mlflow.start_run(experiment_id=experiment_id):\n",
    "        mlflow.log_param(\"model_name\", model_type)\n",
    "        for train_idx, val_idx in skf.split(X_train, y_train):\n",
    "            X_train_fold, X_val_fold = X_train.iloc[train_idx], X_train.iloc[val_idx]\n",
    "            y_train_fold, y_val_fold = y_train.iloc[train_idx], y_train.iloc[val_idx]\n",
    "\n",
    "            # Clone and train the model\n",
    "            fold_model = clone(model)\n",
    "            if model_type == 'LGBMClassifier':\n",
    "                fold_model.fit(X_train_fold, y_train_fold)\n",
    "            elif model_type == 'XGBClassifier':\n",
    "                fold_model.fit(X_train_fold, y_train_fold, eval_set=[(X_val_fold, y_val_fold)], early_stopping_rounds=10, verbose=False)\n",
    "            elif model_type == 'CatBoostClassifier':\n",
    "                fold_model.fit(X_train_fold, y_train_fold, eval_set=[(X_val_fold, y_val_fold)], cat_features=categorical_features, early_stopping_rounds=10, verbose=False)\n",
    "            else:\n",
    "                fold_model.fit(X_train_fold, y_train_fold)\n",
    "\n",
    "            # Evaluate the model\n",
    "            y_val_pred = fold_model.predict_proba(X_val_fold)[:, 1]\n",
    "            val_roc_auc = roc_auc_score(y_val_fold, y_val_pred)\n",
    "            cv_scores.append(val_roc_auc)\n",
    "            mlflow.log_metric(f\"val_roc_auc_fold_{len(cv_scores)}\", val_roc_auc)\n",
    "\n",
    "            # Check if the current fold's model is the best one for this algorithm\n",
    "            if val_roc_auc > best_score:\n",
    "                best_score = val_roc_auc\n",
    "                best_model = fold_model\n",
    "\n",
    "        mlflow.log_params(model_config['params'])\n",
    "        mlflow.log_metric(\"best_val_roc_auc\", best_score)\n",
    "\n",
    "    # Save the best model for this algorithm\n",
    "    if save_best_model:\n",
    "        best_model_filename = f\"{model_type}_best_model.joblib\"\n",
    "        best_model_save = os.path.join(save_dir, experiment_id)\n",
    "        check_and_create_directory(best_model_save)\n",
    "        joblib.dump(best_model, os.path.join(best_model_save, best_model_filename))\n",
    "        print(f\"Best model ({model_type}) with ROC AUC {best_score:.4f} saved to {best_model_filename}\")\n",
    "\n",
    "    return np.mean(cv_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d9373685",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:29:45.134454Z",
     "iopub.status.busy": "2024-07-15T13:29:45.133662Z",
     "iopub.status.idle": "2024-07-15T13:32:46.622162Z",
     "shell.execute_reply": "2024-07-15T13:32:46.621444Z"
    },
    "papermill": {
     "duration": 181.530451,
     "end_time": "2024-07-15T13:32:46.643847",
     "exception": false,
     "start_time": "2024-07-15T13:29:45.113396",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training and evaluating model: xgboost\n",
      "Best model (XGBClassifier) with ROC AUC 0.8767 saved to XGBClassifier_best_model.joblib\n",
      "ROC AUC for xgboost: 0.876\n",
      "Training and evaluating model: catboost\n",
      "Best model (CatBoostClassifier) with ROC AUC 0.8688 saved to CatBoostClassifier_best_model.joblib\n",
      "ROC AUC for catboost: 0.869\n",
      "Training and evaluating model: lightgbm\n",
      "Best model (LGBMClassifier) with ROC AUC 0.8644 saved to LGBMClassifier_best_model.joblib\n",
      "ROC AUC for lightgbm: 0.864\n"
     ]
    }
   ],
   "source": [
    "# Initiating for Experiment tracking\n",
    "check_and_create_directory(CFG.MODEL_SAVE_PATH) # to create directory to save models\n",
    "check_and_create_directory(CFG.MLFLOW_LOCAL_URI) # to create directory for experiment tracking\n",
    "if CFG.EXPERIMENT_RECORDING =='LOCAL':\n",
    "    mlflow.set_tracking_uri(CFG.MLFLOW_LOCAL_URI)\n",
    "else:\n",
    "    dagshub.init(CFG.DAGSHUB_REPO, CFG.DAGSHUB_REPO_OWNER, mlflow=True)\n",
    "experiment_id = get_or_create_experiment_id(CFG.MLFLOW_EXPERIMENT_NAME)\n",
    "for model_name, model_config in CFG.MODELS.items():\n",
    "    print(f\"Training and evaluating model: {model_name}\")\n",
    "    average_rmse = train_and_evaluate(model_config, X_train, y_train,experiment_id)\n",
    "    print(f\"ROC AUC for {model_name}: {average_rmse:.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "722db415",
   "metadata": {
    "papermill": {
     "duration": 0.019518,
     "end_time": "2024-07-15T13:32:46.683046",
     "exception": false,
     "start_time": "2024-07-15T13:32:46.663528",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.3\"></a>\n",
    "### <b>5.3 <span style='color:#E1B12D'>  Performance Evaluation </span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "33b5996d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:32:46.723305Z",
     "iopub.status.busy": "2024-07-15T13:32:46.722982Z",
     "iopub.status.idle": "2024-07-15T13:33:05.529855Z",
     "shell.execute_reply": "2024-07-15T13:33:05.528907Z"
    },
    "papermill": {
     "duration": 18.829361,
     "end_time": "2024-07-15T13:33:05.531846",
     "exception": false,
     "start_time": "2024-07-15T13:32:46.702485",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['CatBoostClassifier_best_model.joblib', 'XGBClassifier_best_model.joblib', 'LGBMClassifier_best_model.joblib']\n",
      "Loaded model from /kaggle/working/models/634614819816837483/CatBoostClassifier_best_model.joblib\n",
      "Test ROC AUC: 0.8687187443862285\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded model from /kaggle/working/models/634614819816837483/XGBClassifier_best_model.joblib\n",
      "Test ROC AUC: 0.8766572331732064\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded model from /kaggle/working/models/634614819816837483/LGBMClassifier_best_model.joblib\n",
      "Test ROC AUC: 0.8641996876682784\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                  Model   ROC AUC\n",
      "0  CatBoostClassifier_best_model.joblib  0.868719\n",
      "1       XGBClassifier_best_model.joblib  0.876657\n",
      "2      LGBMClassifier_best_model.joblib  0.864200\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "6618"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score, roc_curve, auc\n",
    "def load_and_evaluate_models(model_directory, X_test, y_test, experiment_id):\n",
    "    \"\"\"Evaluate the Performance of Various Models using Test Data\"\"\"\n",
    "    # List all files in the model directory\n",
    "    print(os.listdir(os.path.join(model_directory, experiment_id)))\n",
    "    model_files = [f for f in os.listdir(os.path.join(model_directory, experiment_id)) if f.endswith('.joblib')]\n",
    "\n",
    "    results = []\n",
    "\n",
    "    # Iterate over the found model files\n",
    "    for model_file in model_files:\n",
    "        # Load the model\n",
    "        model_path = os.path.join(model_directory, experiment_id, model_file)\n",
    "        model = joblib.load(model_path)\n",
    "        print(f\"Loaded model from {model_path}\")\n",
    "\n",
    "        # Predict on the test set\n",
    "        y_test_pred_proba = model.predict_proba(X_test)[:, 1]\n",
    "\n",
    "        # Evaluate the model on the test set\n",
    "        test_roc_auc = roc_auc_score(y_test, y_test_pred_proba)\n",
    "        print(f'Test ROC AUC: {test_roc_auc}')\n",
    "\n",
    "        # Store the results in the list\n",
    "        results.append({\n",
    "            'Model': model_file,\n",
    "            'ROC AUC': test_roc_auc\n",
    "        })\n",
    "\n",
    "        # Plot ROC curve\n",
    "        fpr, tpr, _ = roc_curve(y_test, y_test_pred_proba)\n",
    "        roc_auc = auc(fpr, tpr)\n",
    "        plt.figure(figsize=(10, 6))\n",
    "        plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')\n",
    "        plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "        plt.xlim([0.0, 1.0])\n",
    "        plt.ylim([0.0, 1.05])\n",
    "        plt.xlabel('False Positive Rate')\n",
    "        plt.ylabel('True Positive Rate')\n",
    "        plt.title(f'Receiver Operating Characteristic - {model_file}')\n",
    "        plt.legend(loc='lower right')\n",
    "        plt.show()\n",
    "\n",
    "    del model\n",
    "\n",
    "    # Convert the list of results to a DataFrame\n",
    "    results_df = pd.DataFrame(results)\n",
    "\n",
    "    return results_df\n",
    "\n",
    "# Assuming model_directory, X_test, y_test, and experiment_id are defined\n",
    "model_directory = CFG.MODEL_SAVE_PATH\n",
    "results = load_and_evaluate_models(model_directory, X_test, y_test, experiment_id)\n",
    "\n",
    "\n",
    "# Display the evaluation results\n",
    "print(results)\n",
    "\n",
    "# Cleanup after execution\n",
    "del X_train\n",
    "del y_train\n",
    "gc.collect()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b3b5aaf",
   "metadata": {
    "papermill": {
     "duration": 0.022327,
     "end_time": "2024-07-15T13:33:05.577839",
     "exception": false,
     "start_time": "2024-07-15T13:33:05.555512",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.4\"></a>\n",
    "### <b>5.4 <span style='color:#E1B12D'> Ensembling for Performance Improvement </span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d9aceca7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:33:05.624076Z",
     "iopub.status.busy": "2024-07-15T13:33:05.623724Z",
     "iopub.status.idle": "2024-07-15T13:34:11.292209Z",
     "shell.execute_reply": "2024-07-15T13:34:11.291325Z"
    },
    "papermill": {
     "duration": 65.717557,
     "end_time": "2024-07-15T13:34:11.317712",
     "exception": false,
     "start_time": "2024-07-15T13:33:05.600155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2024-07-15 13:33:14,333] A new study created in memory with name: no-name-51fd50c2-e7d2-4aaa-83d0-ecdab8b25865\n",
      "[I 2024-07-15 13:33:20,027] Trial 0 finished with value: 0.8712426252897334 and parameters: {'w_catboost': 0.5751248548468881, 'w_xgboost': 0.4018537115556797, 'w_lightgbm': 0.5668981769402733}. Best is trial 0 with value: 0.8712426252897334.\n",
      "[I 2024-07-15 13:33:25,720] Trial 1 finished with value: 0.8732986681983884 and parameters: {'w_catboost': 0.9042368152174519, 'w_xgboost': 0.9569016786603348, 'w_lightgbm': 0.39924464748579425}. Best is trial 1 with value: 0.8732986681983884.\n",
      "[I 2024-07-15 13:33:31,390] Trial 2 finished with value: 0.8719061377273463 and parameters: {'w_catboost': 0.6658932504733912, 'w_xgboost': 0.4356373716354993, 'w_lightgbm': 0.38371857282987576}. Best is trial 1 with value: 0.8732986681983884.\n",
      "[I 2024-07-15 13:33:37,111] Trial 3 finished with value: 0.8730149112030678 and parameters: {'w_catboost': 0.23216446725356032, 'w_xgboost': 0.4131610529451718, 'w_lightgbm': 0.3084493688506649}. Best is trial 1 with value: 0.8732986681983884.\n",
      "[I 2024-07-15 13:33:42,808] Trial 4 finished with value: 0.8704596750898338 and parameters: {'w_catboost': 0.6153332420242982, 'w_xgboost': 0.4676237038113912, 'w_lightgbm': 0.9841350901012346}. Best is trial 1 with value: 0.8732986681983884.\n",
      "[I 2024-07-15 13:33:48,507] Trial 5 finished with value: 0.8727411517913837 and parameters: {'w_catboost': 0.8397183581013011, 'w_xgboost': 0.7479875035216068, 'w_lightgbm': 0.43725579938330206}. Best is trial 1 with value: 0.8732986681983884.\n",
      "[I 2024-07-15 13:33:54,220] Trial 6 finished with value: 0.8695530383706299 and parameters: {'w_catboost': 0.2086879074546153, 'w_xgboost': 0.07570891804188729, 'w_lightgbm': 0.24306325281279262}. Best is trial 1 with value: 0.8732986681983884.\n",
      "[I 2024-07-15 13:33:59,912] Trial 7 finished with value: 0.8727918811513538 and parameters: {'w_catboost': 0.5619377436793738, 'w_xgboost': 0.3710179420232699, 'w_lightgbm': 0.11587759378328844}. Best is trial 1 with value: 0.8732986681983884.\n",
      "[I 2024-07-15 13:34:05,601] Trial 8 finished with value: 0.8686665931036106 and parameters: {'w_catboost': 0.29739617152579556, 'w_xgboost': 0.08862943802159429, 'w_lightgbm': 0.4662433770847545}. Best is trial 1 with value: 0.8732986681983884.\n",
      "[I 2024-07-15 13:34:11,287] Trial 9 finished with value: 0.875151602834853 and parameters: {'w_catboost': 0.1466707216734393, 'w_xgboost': 0.7811307191703314, 'w_lightgbm': 0.19850706986519917}. Best is trial 9 with value: 0.875151602834853.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best weights: {'CatBoostClassifier_best': 0.1302225103325513, 'XGBClassifier_best': 0.6935317559472567, 'LGBMClassifier_best': 0.17624573372019203}\n"
     ]
    }
   ],
   "source": [
    "def load_models(model_directory):\n",
    "    \"\"\"Load all models from the specified directory.\"\"\"\n",
    "    models = {}\n",
    "    for model_name in ['XGBClassifier_best', 'CatBoostClassifier_best', 'LGBMClassifier_best']:\n",
    "        file_path = os.path.join(model_directory, f\"{model_name}_model.joblib\")\n",
    "        models[model_name] = joblib.load(file_path)\n",
    "    return models\n",
    "\n",
    "# Directory where models are saved\n",
    "model_directory = '/kaggle/working/models/' + experiment_id\n",
    "\n",
    "# Load models\n",
    "models = load_models(model_directory)\n",
    "\n",
    "def objective(trial):\n",
    "    \"\"\"Enhance the performance of ensembling and optimizing weights.\"\"\"\n",
    "    # Suggest weights for each model\n",
    "    w_catboost = trial.suggest_float('w_catboost', 0, 1)\n",
    "    w_xgboost = trial.suggest_float('w_xgboost', 0, 1)\n",
    "    w_lightgbm = trial.suggest_float('w_lightgbm', 0, 1)\n",
    "    \n",
    "    # Normalize weights so they sum to 1\n",
    "    total = w_catboost + w_xgboost + w_lightgbm\n",
    "    w_catboost /= total\n",
    "    w_xgboost /= total\n",
    "    w_lightgbm /= total\n",
    "    \n",
    "    # Collect individual model predictions\n",
    "    y_pred_cat = models['CatBoostClassifier_best'].predict_proba(X_test)[:, 1]\n",
    "    y_pred_xgb = models['XGBClassifier_best'].predict_proba(X_test)[:, 1]\n",
    "    y_pred_lgb = models['LGBMClassifier_best'].predict_proba(X_test)[:, 1]\n",
    "\n",
    "    # Combine predictions based on the weights\n",
    "    y_pred = (w_catboost * y_pred_cat + w_xgboost * y_pred_xgb + w_lightgbm * y_pred_lgb)\n",
    "\n",
    "    # Calculate and return the ROC AUC score\n",
    "    roc_auc = roc_auc_score(y_test, y_pred)\n",
    "    return roc_auc\n",
    "\n",
    "# Set up Optuna study\n",
    "study = optuna.create_study(direction='maximize')\n",
    "study.optimize(objective, n_trials=10)\n",
    "\n",
    "# Retrieve the best weights\n",
    "best_weights = {\n",
    "    'CatBoostClassifier_best': study.best_trial.params['w_catboost'],\n",
    "    'XGBClassifier_best': study.best_trial.params['w_xgboost'],\n",
    "    'LGBMClassifier_best': study.best_trial.params['w_lightgbm']\n",
    "}\n",
    "total = sum(best_weights.values())\n",
    "best_weights = {model: weight / total for model, weight in best_weights.items()}\n",
    "print(\"Best weights:\", best_weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "63fc9059",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:34:11.366465Z",
     "iopub.status.busy": "2024-07-15T13:34:11.365686Z",
     "iopub.status.idle": "2024-07-15T13:34:11.371779Z",
     "shell.execute_reply": "2024-07-15T13:34:11.370934Z"
    },
    "papermill": {
     "duration": 0.032401,
     "end_time": "2024-07-15T13:34:11.373737",
     "exception": false,
     "start_time": "2024-07-15T13:34:11.341336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def predict_ensemble(X_test, model_directory, best_weights):\n",
    "    \"\"\"Make predictions using an ensemble of pre-trained models and specified weights.\"\"\"\n",
    "    models = load_models(model_directory)\n",
    "    # Collect individual model predictions\n",
    "    y_pred_cat = models['CatBoostClassifier_best'].predict_proba(X_test)[:, 1]\n",
    "    y_pred_xgb = models['XGBClassifier_best'].predict_proba(X_test)[:, 1]\n",
    "    y_pred_lgb = models['LGBMClassifier_best'].predict_proba(X_test)[:, 1]\n",
    "\n",
    "    # Combine predictions based on the weights\n",
    "    y_pred = (best_weights['CatBoostClassifier_best'] * y_pred_cat +\n",
    "              best_weights['XGBClassifier_best'] * y_pred_xgb +\n",
    "              best_weights['LGBMClassifier_best'] * y_pred_lgb)\n",
    "    return y_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39da200f",
   "metadata": {
    "papermill": {
     "duration": 0.023076,
     "end_time": "2024-07-15T13:34:11.419958",
     "exception": false,
     "start_time": "2024-07-15T13:34:11.396882",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.5\"></a>\n",
    "### <b>5.5 <span style='color:#E1B12D'> Model Explainablity </span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "eed3bf85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:34:11.467962Z",
     "iopub.status.busy": "2024-07-15T13:34:11.467459Z",
     "iopub.status.idle": "2024-07-15T13:34:11.472322Z",
     "shell.execute_reply": "2024-07-15T13:34:11.471529Z"
    },
    "papermill": {
     "duration": 0.030989,
     "end_time": "2024-07-15T13:34:11.474251",
     "exception": false,
     "start_time": "2024-07-15T13:34:11.443262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def model_explainability(model_directory, X_test):\n",
    "#     \"\"\"Provide the importance of Features in the Model\"\"\"\n",
    "#     shap_values_dict = {}\n",
    "#     X_test_sampled = X_test.sample(frac=0.005)  # Ensure variable naming consistency\n",
    "#     models = load_models(model_directory)\n",
    "#     for name, model in models.items():\n",
    "#         print(f\"Explaining model: {name}\")\n",
    "#         if 'catboost' in name.lower():\n",
    "#             explainer = shap.TreeExplainer(model, feature_perturbation='interventional', check_additivity=False)\n",
    "#             shap_values = explainer(X_test_sampled, check_additivity=False)\n",
    "#         elif 'xgb' in name.lower() or 'lgbm' in name.lower():\n",
    "#             explainer = shap.TreeExplainer(model, check_additivity=False)\n",
    "#             shap_values = explainer(X_test_sampled, check_additivity=False)\n",
    "#         else:\n",
    "#             explainer = shap.Explainer(model)\n",
    "#             shap_values = explainer.shap_values(X_test_sampled)\n",
    "#         if isinstance(shap_values, list):\n",
    "#             shap_values = shap_values[1]  # For binary classification, use the positive class SHAP values\n",
    "        \n",
    "#         # Ensure feature names are passed correctly\n",
    "        \n",
    "#         shap_values_dict[name] = shap_values\n",
    "        \n",
    "#         # Plot summary plot for the current model\n",
    "#         shap.summary_plot(shap_values, X_test_sampled, show=False)\n",
    "#         plt.title(f\"SHAP Summary Plot for {name}\")\n",
    "#         plt.show()\n",
    "        \n",
    "#         # Plot feature importance bar chart for the current model\n",
    "#         shap.plots.bar(shap_values, show=False)\n",
    "#         plt.title(f\"SHAP Feature Importance for {name}\")\n",
    "#         plt.show()\n",
    "    \n",
    "#     return shap_values_dict\n",
    "\n",
    "# # Example usage\n",
    "# shap_values_dict = model_explainability(model_directory, X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04de401f",
   "metadata": {
    "papermill": {
     "duration": 0.023107,
     "end_time": "2024-07-15T13:34:11.520967",
     "exception": false,
     "start_time": "2024-07-15T13:34:11.497860",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"toc\"></a>\n",
    "\n",
    "<a href=\"#toc\" style=\"background-color: #E1B12D; color: #ffffff; padding: 7px 10px; text-decoration: none; border-radius: 50px;\">Back to top</a><a id=\"toc\"></a>\n",
    "<a id=\"6\"></a>\n",
    "## <b>6 <span style='color:#E1B12D'> Model Inference </span></b> \n",
    "<a id=\"6.1\"></a>\n",
    "### <b>6.1 <span style='color:#E1B12D'> Loading the Model </span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "fc4a6d79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:34:11.569856Z",
     "iopub.status.busy": "2024-07-15T13:34:11.568908Z",
     "iopub.status.idle": "2024-07-15T13:34:11.575320Z",
     "shell.execute_reply": "2024-07-15T13:34:11.574615Z"
    },
    "papermill": {
     "duration": 0.032782,
     "end_time": "2024-07-15T13:34:11.577210",
     "exception": false,
     "start_time": "2024-07-15T13:34:11.544428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def predict_ensemble(X_test, model_directory, best_weights):\n",
    "    \"\"\"Make predictions using an ensemble of pre-trained models and specified weights.\"\"\"\n",
    "    models = load_models(model_directory)\n",
    "    # Collect individual model predictions\n",
    "    y_pred_cat = models['CatBoostClassifier_best'].predict_proba(X_test)[:, 1]\n",
    "    y_pred_xgb = models['XGBClassifier_best'].predict_proba(X_test)[:, 1]\n",
    "    y_pred_lgb = models['LGBMClassifier_best'].predict_proba(X_test)[:, 1]\n",
    "\n",
    "    # Combine predictions based on the weights\n",
    "    y_pred = (best_weights['CatBoostClassifier_best'] * y_pred_cat +\n",
    "              best_weights['XGBClassifier_best'] * y_pred_xgb +\n",
    "              best_weights['LGBMClassifier_best'] * y_pred_lgb)\n",
    "    return y_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81c94d5a",
   "metadata": {
    "papermill": {
     "duration": 0.022994,
     "end_time": "2024-07-15T13:34:11.623940",
     "exception": false,
     "start_time": "2024-07-15T13:34:11.600946",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"6.2\"></a>\n",
    "### <b>6.2 <span style='color:#E1B12D'> Data Loading and Prepration </span></b> \n",
    "#### 6.2.1 Reading the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "68759ba9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:34:11.671718Z",
     "iopub.status.busy": "2024-07-15T13:34:11.671398Z",
     "iopub.status.idle": "2024-07-15T13:34:23.929579Z",
     "shell.execute_reply": "2024-07-15T13:34:23.928581Z"
    },
    "papermill": {
     "duration": 12.284852,
     "end_time": "2024-07-15T13:34:23.932054",
     "exception": false,
     "start_time": "2024-07-15T13:34:11.647202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df = pd.read_csv(CFG.TEST_PATH)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e93fe5ac",
   "metadata": {
    "papermill": {
     "duration": 0.023203,
     "end_time": "2024-07-15T13:34:23.979380",
     "exception": false,
     "start_time": "2024-07-15T13:34:23.956177",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 6.2.2 Processing the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "82ce86bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:34:24.027393Z",
     "iopub.status.busy": "2024-07-15T13:34:24.026876Z",
     "iopub.status.idle": "2024-07-15T13:34:32.760293Z",
     "shell.execute_reply": "2024-07-15T13:34:32.759524Z"
    },
    "papermill": {
     "duration": 8.760031,
     "end_time": "2024-07-15T13:34:32.762678",
     "exception": false,
     "start_time": "2024-07-15T13:34:24.002647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df_preprocessed = preprocess_test_data(test_df, numerical_cols, categorical_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ef69e530",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:34:32.812002Z",
     "iopub.status.busy": "2024-07-15T13:34:32.811506Z",
     "iopub.status.idle": "2024-07-15T13:34:32.819453Z",
     "shell.execute_reply": "2024-07-15T13:34:32.818579Z"
    },
    "papermill": {
     "duration": 0.034708,
     "end_time": "2024-07-15T13:34:32.821379",
     "exception": false,
     "start_time": "2024-07-15T13:34:32.786671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df_preprocessed['Vehicle_Age']=test_df_preprocessed['Vehicle_Age'].astype('category')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b731b656",
   "metadata": {
    "papermill": {
     "duration": 0.023084,
     "end_time": "2024-07-15T13:34:32.867897",
     "exception": false,
     "start_time": "2024-07-15T13:34:32.844813",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"6.3\"></a>\n",
    "### <b>6.3 <span style='color:#E1B12D'> Model Forecasting </span></b> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "fc7341dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:34:32.915810Z",
     "iopub.status.busy": "2024-07-15T13:34:32.915087Z",
     "iopub.status.idle": "2024-07-15T13:34:32.919927Z",
     "shell.execute_reply": "2024-07-15T13:34:32.919077Z"
    },
    "papermill": {
     "duration": 0.030692,
     "end_time": "2024-07-15T13:34:32.921852",
     "exception": false,
     "start_time": "2024-07-15T13:34:32.891160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def prediction(df):\n",
    "    y_pred = predict_ensemble(df, model_directory, best_weights)\n",
    "    df['Response'] = y_pred\n",
    "    df = df[['id','Response']]\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ca1ca425",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:34:32.969328Z",
     "iopub.status.busy": "2024-07-15T13:34:32.968837Z",
     "iopub.status.idle": "2024-07-15T13:35:17.221838Z",
     "shell.execute_reply": "2024-07-15T13:35:17.221039Z"
    },
    "papermill": {
     "duration": 44.27945,
     "end_time": "2024-07-15T13:35:17.224393",
     "exception": false,
     "start_time": "2024-07-15T13:34:32.944943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df = prediction(test_df_preprocessed)\n",
    "test_df.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeed6be2",
   "metadata": {
    "papermill": {
     "duration": 0.023883,
     "end_time": "2024-07-15T13:35:17.272666",
     "exception": false,
     "start_time": "2024-07-15T13:35:17.248783",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Mlflow Local UI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c98df86d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T13:35:17.320532Z",
     "iopub.status.busy": "2024-07-15T13:35:17.320196Z",
     "iopub.status.idle": "2024-07-15T13:35:46.396434Z",
     "shell.execute_reply": "2024-07-15T13:35:46.395226Z"
    },
    "papermill": {
     "duration": 29.102851,
     "end_time": "2024-07-15T13:35:46.398881",
     "exception": false,
     "start_time": "2024-07-15T13:35:17.296030",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MLflow Tracking UI: https://53fa-35-229-194-187.ngrok-free.app\n"
     ]
    }
   ],
   "source": [
    "if CFG.EXPERIMENT_RECORDING == 'LOCAL':\n",
    "    !pip install mlflow --quiet\n",
    "    !pip install pyngrok --quiet\n",
    "    \n",
    "    from pyngrok import ngrok\n",
    "    from getpass import getpass\n",
    "\n",
    "    ngrok.kill()\n",
    "\n",
    "    # Setting the authtoken (replace with your own token from https://dashboard.ngrok.com/auth)\n",
    "    NGROK_AUTH_TOKEN = \"2ioyKWLGBeFWH5D7vI5ktAJaZSV_2aUaXGdGJeHsk43qWXRvk\"\n",
    "    ngrok.set_auth_token(NGROK_AUTH_TOKEN)\n",
    "\n",
    "    # Start the MLflow UI\n",
    "    get_ipython().system_raw(\"mlflow ui --backend-store-uri file:/kaggle/working/mlflow --host 0.0.0.0 --port 5000 &\")\n",
    "\n",
    "    # Open an HTTPs tunnel on port 5000 for http://localhost:5000\n",
    "    ngrok_tunnel = ngrok.connect(addr=\"5000\", proto=\"http\", bind_tls=True)\n",
    "    print(\"MLflow Tracking UI:\", ngrok_tunnel.public_url)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf5947d3",
   "metadata": {
    "papermill": {
     "duration": 0.031785,
     "end_time": "2024-07-15T13:35:46.463373",
     "exception": false,
     "start_time": "2024-07-15T13:35:46.431588",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 8930475,
     "sourceId": 73291,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30733,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 485.411024,
   "end_time": "2024-07-15T13:35:49.643743",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-15T13:27:44.232719",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
